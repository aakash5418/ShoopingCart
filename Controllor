using productService;
using Microsoft.AspNetCore.Mvc;
using ShoppingCart.WebApi.Model;

namespace ShoppingCart.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductController : ControllerBase
    {
        //Todo: Karthick Code Review
        private readonly IProductService _productService;

        public ProductController(IProductService productService)
        {
            _productService = productService;
        }

        [HttpGet]
        [Route("GetProducts")]

        public IActionResult GetProducts()
        {
            var productServiceInfoList = _productService.GetProducts();
            return Ok(productServiceInfoList);
        }

        [HttpGet]
        [Route("GetProductId")]

        public async Task<IActionResult> GetProduct(int ProductId)
        {
            var productModel = _productService.GetProduct(ProductId);
            return Ok(productModel);
        }

        [HttpPost]
        [Route("AddProduct")]

        public async Task<ActionResult<ProductModel>> AddProduct(ProductModel productModel)
        {
            try
            {
                var productserviceinfo = new ProductServiceInfo();
                productserviceinfo.ProductId = productModel.ProductId;
                productserviceinfo.ProductName = productModel.ProductName;
                productserviceinfo.UnitPrice = productModel.UnitPrice;
                productserviceinfo.UnitDiscount = productModel.UnitDiscount;
                productserviceinfo.CreatedBy = productModel.CreatedBy;
                productserviceinfo.ModifiedBy = productModel.ModifiedBy;
                productserviceinfo.CreatedDate = productModel.CreatedDate;
                productserviceinfo.ModifiedDate = productModel.ModifiedDate;
                var addedProductList = _productService.AddProduct(productserviceinfo);

                return Ok(addedProductList);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPut]
        [Route("UpdateProduct")]

        public async Task<ActionResult<ProductModel>> UpdateProduct(ProductModel productModel)
        {
            try
            {
                if (productModel.ProductId != 0)
                {
                    var productserviceinfo = new ProductServiceInfo();
                    productserviceinfo.ProductId = productModel.ProductId;
                    productserviceinfo.ProductName = productModel.ProductName;
                    productserviceinfo.UnitPrice = productModel.UnitPrice;
                    productserviceinfo.UnitDiscount = productModel.UnitDiscount;
                    productserviceinfo.CreatedBy = productModel.CreatedBy;
                    productserviceinfo.ModifiedBy = productModel.ModifiedBy;
                    productserviceinfo.CreatedDate = productModel.CreatedDate;
                    productserviceinfo.ModifiedDate = productModel.ModifiedDate;
                    var updatedProductList = _productService.UpdateProduct(productserviceinfo);

                    return Ok(updatedProductList);
                }
                else
                {
                    return BadRequest("ProductId Not Exists");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpDelete]
        [Route("DeleteProduct")]

        public async Task<ActionResult> DeleteProduct(int ProductId)
        {
            try
            {
                if (ProductId != 0)
                {
                    _productService.DeleteProduct(ProductId);
                    return Ok();
                }
                else
                {
                    return BadRequest("ProductId Not Exists");
                }
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}

//Todo: Karthick Code Review

using Microsoft.AspNetCore.Mvc;
using ShoppingCart.Service;
using ShoppingCart.WebApi.Model;

namespace ShoppingCart.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PurchaseController : ControllerBase
    {
        private readonly IPurchaseService _purchaseService;
        public PurchaseController(IPurchaseService purchaseService)
        {
            _purchaseService = purchaseService;
        }


        [HttpGet]
        [Route("GetPurchase")]
        public IActionResult GetPurchase()
        {
            var purchaseLst = _purchaseService.GetPurchase();
            return Ok(purchaseLst);
        }

        [HttpGet]
        [Route("GetPurchaseId")]
        public IActionResult GetPurchaseId(long purchaseId)
        {
            var purchaseStoreInfo = _purchaseService.GetPurchaseId(purchaseId);
            return Ok(purchaseStoreInfo);
        }



        [HttpPost]
        [Route("AddPurchase")]

        public async Task<ActionResult<PurchaseModel>> AddPurchase(PurchaseModel purchaseModel)
        {
            var purchaseServiceInfo = new PurchaseServiceInfo();
            purchaseServiceInfo.PurchaseID = purchaseModel.PurchaseID;
            purchaseServiceInfo.ProductID = purchaseModel.ProductID;
            purchaseServiceInfo.Quantity = purchaseModel.Quantity;
            purchaseServiceInfo.UnitPrice = purchaseModel.UnitPrice;
            purchaseServiceInfo.UnitDiscount = purchaseModel.UnitDiscount;
            purchaseServiceInfo.TotalDiscount = purchaseModel.TotalDiscount;
            purchaseServiceInfo.TotalAmount = purchaseModel.TotalAmount;
            purchaseServiceInfo.PurchasedDate = purchaseModel.PurchasedDate;
            purchaseServiceInfo.CreatedBy = purchaseModel.CreatedBy;
            purchaseServiceInfo.ModifiedBy = purchaseModel.ModifiedBy;
            purchaseServiceInfo.CreatedDate = purchaseModel.CreatedDate;
            purchaseServiceInfo.ModifiedDate = purchaseModel.ModifiedDate;
            var result = _purchaseService.AddPurchase(purchaseServiceInfo);

            return Ok(result);
        }


        [HttpPut]
        [Route("UpdatePurchase")]


        public async Task<ActionResult<PurchaseModel>> UpdatePurchase(PurchaseModel purchaseModel)
        {
            var purchaseServiveInfo = new PurchaseServiceInfo();
            purchaseServiveInfo.PurchaseID = purchaseModel.PurchaseID;
            purchaseServiveInfo.ProductID = purchaseModel.ProductID;
            purchaseServiveInfo.Quantity = purchaseModel.Quantity;
            purchaseServiveInfo.UnitPrice = purchaseModel.UnitPrice;
            purchaseServiveInfo.UnitDiscount = purchaseModel.UnitDiscount;
            purchaseServiveInfo.TotalDiscount = purchaseModel.TotalDiscount;
            purchaseServiveInfo.TotalAmount = purchaseModel.TotalAmount;
            purchaseServiveInfo.PurchasedDate = purchaseModel.PurchasedDate;
            purchaseServiveInfo.CreatedBy = purchaseModel.CreatedBy;
            purchaseServiveInfo.ModifiedBy = purchaseModel.ModifiedBy;
            purchaseServiveInfo.CreatedDate = purchaseModel.CreatedDate;
            purchaseServiveInfo.ModifiedDate = purchaseModel.ModifiedDate;
            _purchaseService.UpdatePurchase(purchaseServiveInfo);

            return Ok(purchaseServiveInfo);
        }


        [HttpDelete]
        [Route("DeletePurchase")]

        public async Task<ActionResult<PurchaseModel>> DeletePurchase(long PurchaseId)
        {
            _purchaseService.DeletePurchase(PurchaseId);
            return Ok();
        }
    }
}
//Todo: Karthick Code Review

using Microsoft.AspNetCore.Mvc;
using ShoppingCart.Service;
using ShoppingCart.Store;
using ShoppingCart.WebApi.Model;

namespace ShoppingCart.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ReturnController : ControllerBase
    {
        private readonly IReturnService _returnService;

        public ReturnController(IReturnService returnService)
        {
            _returnService = returnService;
        }


        [HttpGet]
        [Route("GetReturns")]
        public IActionResult GetReturns()
        {
            var returnLst = _returnService.GetReturns();
            return Ok(returnLst);
        }

        [HttpGet]
        [Route("GetReturn")]
        public IActionResult GetReturn(long ReturnID)
        {
            var returnStoreInfo = _returnService.GetReturn(ReturnID);
            return Ok(returnStoreInfo);
        }


        [HttpPost]
        [Route("AddReturn")]
        public async Task<ActionResult<ReturnModel>> AddReturn(ReturnModel returnModel)
        {
            var returnserviceinfo = new ReturnServiceInfo();
            returnserviceinfo.ReturnID = returnModel.ReturnID;
            returnserviceinfo.PurchaseID = returnModel.PurchaseID;
            returnserviceinfo.ProductID = returnModel.ProductID;
            returnserviceinfo.ReturnedQuantity = returnModel.ReturnedQuantity;
            returnserviceinfo.ReturnedTotalDiscount = returnModel.ReturnedTotalDiscount;
            returnserviceinfo.ReturnedTotalAmount = returnModel.ReturnedTotalAmount;
            returnserviceinfo.ReturnedDate = returnModel.ReturnedDate;
            returnserviceinfo.CreatedBy = returnModel.CreatedBy;
            returnserviceinfo.ModifiedBy = returnModel.ModifiedBy;
            returnserviceinfo.CreatedDate = returnModel.CreatedDate;
            returnserviceinfo.ModifiedDate = returnModel.ModifiedDate;
            var addedReturnList = _returnService.AddReturn(returnserviceinfo);

            return Ok(addedReturnList);
        }


        [HttpPut]
        [Route("UpdateReturn")]
        public async Task<ActionResult<ReturnModel>> UpdateReturn(ReturnModel returnModel)
        {
            var returnserviceinfo = new ReturnServiceInfo();
            returnserviceinfo.ReturnID = returnModel.ReturnID;
            returnserviceinfo.PurchaseID = returnModel.PurchaseID;
            returnserviceinfo.ProductID = returnModel.ProductID;
            returnserviceinfo.ReturnedQuantity = returnModel.ReturnedQuantity;
            returnserviceinfo.ReturnedTotalDiscount = returnModel.ReturnedTotalDiscount;
            returnserviceinfo.ReturnedTotalAmount = returnModel.ReturnedTotalAmount;
            returnserviceinfo.ReturnedDate = returnModel.ReturnedDate;
            returnserviceinfo.CreatedBy = returnModel.CreatedBy;
            returnserviceinfo.ModifiedBy = returnModel.ModifiedBy;
            returnserviceinfo.CreatedDate = returnModel.CreatedDate;
            returnserviceinfo.ModifiedDate = returnModel.ModifiedDate;
            _returnService.UpdateReturn(returnserviceinfo);

            return Ok(returnserviceinfo);
        }


        [HttpDelete]
        [Route("DeleteReturn")]

        public ActionResult DeleteReturn(long ReturnID)
        {
            try
            {
                _returnService.DeleteReturn(ReturnID);
                return Ok();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}

//Todo: Karthick Code Review

using Microsoft.AspNetCore.Mvc;
using ShoppingCart.Service;
using ShoppingCart.WebApi.Model;

namespace ShoppingCart.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StockController : ControllerBase
    {
        private readonly IStockService _stockService;

        public StockController(IStockService stockService)
        {
            _stockService = stockService;
        }

        [HttpGet]
        [Route("GetStocks")]


        public IActionResult GetStocks()
        {
            var stockServiceinfolst = _stockService.GetStocks();
            return Ok(stockServiceinfolst);
        }


        [HttpGet]
        [Route("GetStockByProductId")]

        public IActionResult GetStockByProductId(long ProductID)
        {
            var stockServiceinfolst = _stockService.GetStockByProductId(ProductID);
            return Ok(stockServiceinfolst);
        }

        [HttpPost]
        [Route("AddStock")]

        public async Task<ActionResult<StockModel>> AddStock(StockModel stockModel)
        {
            var stockserviceinfo = new StockServiceInfo();
            stockserviceinfo.StocktId = stockModel.StocktId;
            stockserviceinfo.ProductId = stockModel.ProductId;
            stockserviceinfo.Quantity = stockModel.Quantity;
            stockserviceinfo.CreatedBy = stockModel.CreatedBy;
            stockserviceinfo.ModifiedBy = stockModel.ModifiedBy;
            stockserviceinfo.CreatedDate = stockModel.CreatedDate;
            stockserviceinfo.ModifiedDate = stockModel.ModifiedDate;
            var addedStockList = _stockService.AddStock(stockserviceinfo);

            return Ok(addedStockList);
        }

        [HttpPut]
        [Route("UpdateStock")]

        public async Task<ActionResult<StockModel>> UpdateStock(StockModel stockModel)
        {
            var stockserviceinfo = new StockServiceInfo();
            stockserviceinfo.StocktId = stockModel.StocktId;
            stockserviceinfo.ProductId = stockModel.ProductId;
            stockserviceinfo.Quantity = stockModel.Quantity;
            stockserviceinfo.CreatedBy = stockModel.CreatedBy;
            stockserviceinfo.ModifiedBy = stockModel.ModifiedBy;
            _stockService.UpdateStock(stockserviceinfo);

            return Ok(stockserviceinfo);
        }

        [HttpDelete]
        [Route("DeleteStock")]

        public async Task<ActionResult> DeleteStock(long StockId)
        {
            _stockService.DeleteStock(StockId);
            return Ok();

        }



    }
}


//Todo: Karthick Code Review

using productService;
using Sample.Shopping.Store.productStore;
using ShoppingCart.Service;
using ShoppingCart.Store;
using static ShoppingCart.Store.IReturnStore;
using static ShoppingCart.Store.ProductStoreInfo;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


builder.Services.AddScoped<IProductService, ProductService>();
builder.Services.AddScoped<IProductStore, ProductStore>();

builder.Services.AddScoped<IStockService, StockService>();
builder.Services.AddScoped<IStockStore, StockStore>();


builder.Services.AddScoped<IPurchaseService, PurchaseService>();
builder.Services.AddScoped<IPurchaseStore, PurchaseStore>();

builder.Services.AddScoped<IReturnService, ReturnService>();
builder.Services.AddScoped<IReturnStore, _ReturnStore>();

//IServiceCollection serviceCollection1 = builder.Services.AddScoped<IProductStore, ProductStore>();
//IServiceCollection serviceCollection = builder.Services.AddScoped<IProductService, ProductService>();


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
